{
  "version": 3,
  "sources": ["../bundle-lS6mpk/checked-fetch.js", "../bundle-lS6mpk/strip-cf-connecting-ip-header.js", "../../../src/auth.ts", "../../../src/protocol.ts", "../../../src/googlePlacesFetchClient.ts", "../../../src/tools/google-places-tools.ts", "../../../src/tools/index.ts", "../../../src/oauth.ts", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-lS6mpk/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-lS6mpk/middleware-loader.entry.ts"],
  "sourceRoot": "/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/.wrangler/tmp/dev-wPCiEr",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "export interface AuthResult {\n  authorized: boolean;\n  userId?: string;\n}\n\nexport async function handleAuth(request: Request, env: any): Promise<AuthResult> {\n  const authHeader = request.headers.get('authorization');\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return { authorized: false };\n  }\n  \n  const token = authHeader.slice(7); // Remove 'Bearer ' prefix\n  \n  // Check for required environment variables\n  if (!env.MCP_AUTH_KEY) {\n    console.error('MCP_AUTH_KEY not configured');\n    return { authorized: false };\n  }\n  \n  // Simple bearer token authentication\n  if (token === env.MCP_AUTH_KEY) {\n    return { authorized: true, userId: 'default' };\n  }\n  \n  return { authorized: false };\n}", "import { Env } from './index.js';\n\nexport interface ToolDefinition {\n  name: string;\n  description: string;\n  inputSchema: any;\n}\n\nexport interface ToolRegistry {\n  tools: ToolDefinition[];\n  handlers: Map<string, (params: any) => Promise<any>>;\n}\n\n// Global registry\nlet toolRegistry: ToolRegistry | null = null;\n\nexport function getToolRegistry(): ToolRegistry {\n  if (!toolRegistry) {\n    toolRegistry = {\n      tools: [],\n      handlers: new Map()\n    };\n  }\n  return toolRegistry;\n}\n\nexport async function handleSseRequest(\n  request: Request,\n  env: Env,\n  ctx: ExecutionContext\n): Promise<Response> {\n  // Implement SSE handling if needed\n  return new Response('SSE endpoint not implemented', {\n    status: 501,\n    headers: {\n      'Content-Type': 'text/plain',\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n}\n\nexport async function handleMcpRequest(\n  request: Request,\n  env: Env,\n  ctx: ExecutionContext\n): Promise<Response> {\n  try {\n    const body = await request.text();\n    const jsonRpcRequest = JSON.parse(body);\n    \n    const { method, params, id } = jsonRpcRequest;\n    \n    switch (method) {\n      case 'initialize': {\n        const response = {\n          jsonrpc: '2.0',\n          result: {\n            protocolVersion: '1.0',\n            serverInfo: {\n              name: 'google-places-mcp',\n              version: '1.0.0'\n            },\n            capabilities: {\n              tools: {}\n            }\n          },\n          id\n        };\n        return new Response(JSON.stringify(response), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n      \n      case 'tools/list': {\n        const registry = getToolRegistry();\n        const response = {\n          jsonrpc: '2.0',\n          result: {\n            tools: registry.tools\n          },\n          id\n        };\n        return new Response(JSON.stringify(response), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n      \n      case 'tools/call': {\n        const { name, arguments: toolArgs } = params;\n        const registry = getToolRegistry();\n        const handler = registry.handlers.get(name);\n        \n        if (!handler) {\n          return new Response(JSON.stringify({\n            jsonrpc: '2.0',\n            error: {\n              code: -32601,\n              message: `Tool not found: ${name}`\n            },\n            id\n          }), {\n            status: 404,\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n        \n        try {\n          const result = await handler(toolArgs);\n          return new Response(JSON.stringify({\n            jsonrpc: '2.0',\n            result,\n            id\n          }), {\n            headers: { 'Content-Type': 'application/json' }\n          });\n        } catch (error) {\n          return new Response(JSON.stringify({\n            jsonrpc: '2.0',\n            error: {\n              code: -32603,\n              message: error instanceof Error ? error.message : 'Internal Server Error'\n            },\n            id\n          }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n      }\n      \n      default: {\n        return new Response(JSON.stringify({\n          jsonrpc: '2.0',\n          error: {\n            code: -32601,\n            message: `Method not found: ${method}`\n          },\n          id\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    }\n  } catch (error) {\n    return new Response(JSON.stringify({\n      jsonrpc: '2.0',\n      error: {\n        code: -32700,\n        message: 'Parse error'\n      },\n      id: null\n    }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}", "interface FindPlaceParams {\n  query: string;\n  language?: string;\n  region?: string;\n  inputtype?: string;\n  fields?: string[];\n  max_results?: number;\n}\n\ninterface PlaceDetailsParams {\n  place_id: string;\n  fields?: string[];\n  language?: string;\n  region?: string;\n}\n\ninterface PlacePhotoParams {\n  photo_reference: string;\n  max_width?: number;\n  max_height?: number;\n}\n\nimport { Env } from './index.js';\n\n/**\n * Google Places API client using Fetch API for Cloudflare Workers\n */\nexport class GooglePlacesFetchClient {\n  private apiKey: string;\n  private baseUrl = 'https://places.googleapis.com/v1/places';\n\n  constructor(env: Env) {\n    // Get API key from environment variable\n    const apiKey = env.GOOGLE_PLACES_API_KEY;\n    if (!apiKey) {\n      throw new Error('GOOGLE_PLACES_API_KEY environment variable is not set');\n    }\n    this.apiKey = apiKey;\n  }\n\n  async findPlace(params: FindPlaceParams): Promise<any> {\n    const url = 'https://places.googleapis.com/v1/places:searchText';\n    \n    // Build request body for new API\n    const requestBody: any = {\n      textQuery: params.query,\n      maxResultCount: params.max_results || 5\n    };\n    \n    if (params.language) {\n      requestBody.languageCode = params.language;\n    }\n    \n    if (params.region) {\n      requestBody.regionCode = params.region;\n    }\n    \n    // Field masks for new API - map to proper field names for Places API (New)\n    let fieldMask = 'places.id,places.displayName,places.formattedAddress,places.types,places.location';\n    \n    // Add additional fields if requested\n    if (params.fields && params.fields.length > 0) {\n      // Map old field names to new ones\n      const fieldMap: {[key: string]: string} = {\n        'place_id': 'id',\n        'name': 'displayName',\n        'formatted_address': 'formattedAddress',\n        'geometry': 'location',\n        'icon_mask_base_uri': 'iconMaskBaseUri',\n        'icon_background_color': 'iconBackgroundColor'\n      };\n      \n      // Use mapped field names or original if no mapping exists\n      fieldMask = params.fields.map(field => \n        `places.${fieldMap[field] || field}`\n      ).join(',');\n    }\n    \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Goog-Api-Key': this.apiKey,\n          'X-Goog-FieldMask': fieldMask\n        },\n        body: JSON.stringify(requestBody)\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(`Google Places API error: ${response.status} - ${JSON.stringify(data)}`);\n      }\n      \n      // Transform response to old format for compatibility\n      return {\n        candidates: data.places?.map((place: any) => ({\n          place_id: place.id || place.name?.split('/').pop(),\n          name: place.displayName?.text || '',\n          formatted_address: place.formattedAddress || '',\n          types: place.types || [],\n          geometry: place.location ? {\n            location: {\n              lat: place.location.latitude,\n              lng: place.location.longitude\n            }\n          } : undefined,\n          // Include any other properties present\n          ...(place.iconMaskBaseUri && { icon_mask_base_uri: place.iconMaskBaseUri }),\n          ...(place.iconBackgroundColor && { icon_background_color: place.iconBackgroundColor })\n        })) || [],\n        status: 'OK'\n      };\n    } catch (error) {\n      console.error('Error calling Google Places API:', error);\n      throw error;\n    }\n  }\n\n  async getPlaceDetails(params: PlaceDetailsParams): Promise<any> {\n    // For new API, construct the place name\n    const placeName = `places/${params.place_id}`;\n    const url = `https://places.googleapis.com/v1/${placeName}`;\n    \n    // Field masks for new API - map to proper field names for Places API (New)\n    let fieldMask = 'places.id,places.displayName,places.formattedAddress,places.types,places.googleMapsUri,places.websiteUri,places.internationalPhoneNumber,places.nationalPhoneNumber,places.location,places.regularOpeningHours,places.utcOffsetMinutes,places.photos,places.rating,places.userRatingCount,places.reviews,places.priceLevel,places.businessStatus';\n    \n    // Add additional fields if requested\n    if (params.fields && params.fields.length > 0) {\n      // Map old field names to new ones\n      const fieldMap: {[key: string]: string} = {\n        'place_id': 'id',\n        'name': 'displayName',\n        'formatted_address': 'formattedAddress',\n        'types': 'types',\n        'url': 'googleMapsUri',\n        'website': 'websiteUri',\n        'international_phone_number': 'internationalPhoneNumber',\n        'formatted_phone_number': 'nationalPhoneNumber',\n        'geometry': 'location',\n        'opening_hours': 'regularOpeningHours',\n        'utc_offset_minutes': 'utcOffsetMinutes',\n        'photos': 'photos',\n        'rating': 'rating',\n        'user_ratings_total': 'userRatingCount',\n        'reviews': 'reviews',\n        'price_level': 'priceLevel',\n        'business_status': 'businessStatus'\n      };\n      \n      // Use mapped field names or original if no mapping exists\n      fieldMask = params.fields.map(field => \n        `places.${fieldMap[field] || field}`\n      ).join(',');\n    }\n    \n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'X-Goog-Api-Key': this.apiKey,\n          'X-Goog-FieldMask': fieldMask\n        }\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(`Google Places API error: ${response.status} - ${JSON.stringify(data)}`);\n      }\n      \n      // Transform response to old format for compatibility\n      return {\n        result: {\n          place_id: data.id || params.place_id,\n          name: data.displayName?.text || '',\n          formatted_address: data.formattedAddress || '',\n          types: data.types || [],\n          url: data.googleMapsUri || '',\n          website: data.websiteUri || '',\n          international_phone_number: data.internationalPhoneNumber || '',\n          formatted_phone_number: data.nationalPhoneNumber || '',\n          geometry: data.location ? {\n            location: {\n              lat: data.location.latitude,\n              lng: data.location.longitude\n            }\n          } : undefined,\n          opening_hours: data.regularOpeningHours ? {\n            weekday_text: data.regularOpeningHours.weekdayDescriptions || [],\n            open_now: data.regularOpeningHours.openNow || false\n          } : undefined,\n          utc_offset_minutes: data.utcOffsetMinutes,\n          photos: data.photos ? data.photos.map((photo: any) => ({\n            photo_reference: photo.name || '',\n            height: photo.heightPx || 0,\n            width: photo.widthPx || 0\n          })) : [],\n          rating: data.rating || 0,\n          user_ratings_total: data.userRatingCount || 0,\n          reviews: data.reviews || [],\n          price_level: data.priceLevel || 0,\n          business_status: data.businessStatus || ''\n        },\n        status: 'OK'\n      };\n    } catch (error) {\n      console.error('Error calling Google Places API:', error);\n      throw error;\n    }\n  }\n\n  getPlacePhotoUrl(params: PlacePhotoParams): string {\n    // The new API returns photo URLs directly from the places response\n    // This method constructs a URL based on the photo reference pattern\n    \n    // Check if the photo_reference is already a full URL\n    if (params.photo_reference.startsWith('http')) {\n      return params.photo_reference;\n    }\n    \n    // Check if it's a Place Photo object name reference (from Places API New)\n    if (params.photo_reference.includes('/photos/')) {\n      const baseUrl = 'https://places.googleapis.com/v1';\n      return `${baseUrl}/${params.photo_reference}/media?maxWidthPx=${params.max_width || 400}&maxHeightPx=${params.max_height || 400}&key=${this.apiKey}`;\n    }\n    \n    // Legacy style photo reference - convert to Places API (New) format if possible\n    // This assumes the reference was stored in the format returned by our transformed results\n    return `https://places.googleapis.com/v1/places/photos/${params.photo_reference}/media?maxWidthPx=${params.max_width || 400}&maxHeightPx=${params.max_height || 400}&key=${this.apiKey}`;\n  }\n}", "import { GooglePlacesFetchClient } from '../googlePlacesFetchClient.js';\nimport { Env } from '../index.js';\n\n// Store environment reference\nlet envRef: Env | null = null;\n\nexport function setEnvironment(env: Env) {\n  envRef = env;\n}\n\nfunction getPlacesClient(): GooglePlacesFetchClient {\n  if (!envRef) {\n    throw new Error('Environment not initialized');\n  }\n  return new GooglePlacesFetchClient(envRef);\n}\n\nexport const findPlaceTool = {\n  name: 'find_place',\n  description: 'Searches for places based on a text query. Returns a list of candidates.',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      query: {\n        type: 'string',\n        description: 'The text string to search for (e.g., \"restaurants in Paris\", \"Eiffel Tower\").'\n      },\n      language: {\n        type: 'string',\n        description: 'The language code (e.g., \"en\", \"fr\") to return results in.',\n        enum: ['ar', 'be', 'bg', 'bn', 'ca', 'cs', 'da', 'de', 'el', 'en', 'en-Au', 'en-GB', 'es', 'eu', 'fa', 'fi', 'fil', 'fr', 'gl', 'gu', 'hi', 'hr', 'hu', 'id', 'it', 'iw', 'ja', 'kk', 'kn', 'ko', 'ky', 'lt', 'lv', 'mk', 'ml', 'mr', 'my', 'nl', 'no', 'pa', 'pl', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl', 'sq', 'sr', 'sv', 'ta', 'te', 'th', 'tl', 'tr', 'uk', 'uz', 'vi', 'zh-CN', 'zh-TW']\n      },\n      region: {\n        type: 'string',\n        description: 'The region code (e.g., \"us\", \"fr\") to bias results towards.'\n      },\n      inputtype: {\n        type: 'string',\n        description: 'The type of input. Can be \"textQuery\" or \"phoneNumber\".',\n        enum: ['textquery', 'phonenumber'],\n        default: 'textquery'\n      },\n      fields: {\n        type: 'array',\n        items: { type: 'string' },\n        description: 'Basic fields to return for each candidate.',\n        default: ['place_id', 'name', 'formatted_address', 'types', 'geometry', 'icon_mask_base_uri', 'icon_background_color']\n      },\n      max_results: {\n        type: 'integer',\n        description: 'Maximum number of place candidates to return (default 5, max 10).',\n        minimum: 1,\n        maximum: 10,\n        default: 5\n      }\n    },\n    required: ['query']\n  },\n  handler: async (args: any) => {\n    try {\n      const client = getPlacesClient();\n      \n      const result = await client.findPlace({\n        query: args.query,\n        language: args.language,\n        region: args.region,\n        inputtype: args.inputtype || 'textquery',\n        fields: args.fields || ['place_id', 'name', 'formatted_address', 'types', 'geometry', 'icon_mask_base_uri', 'icon_background_color'],\n        max_results: args.max_results || 5\n      });\n      \n      return {\n        content: [{\n          type: 'text',\n          text: JSON.stringify(result, null, 2)\n        }]\n      };\n    } catch (error: any) {\n      console.error('Error in find_place tool:', error);\n      return {\n        content: [{\n          type: 'text',\n          text: JSON.stringify({ \n            status: 'error', \n            message: error.message \n          }, null, 2)\n        }]\n      };\n    }\n  }\n};\n\nexport const getPlaceDetailsTool = {\n  name: 'get_place_details',\n  description: 'Retrieves detailed information about a specific place using its Place ID.',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      place_id: {\n        type: 'string',\n        description: 'The Place ID of the place.'\n      },\n      fields: {\n        type: 'array',\n        items: { type: 'string' },\n        description: 'Specific fields to request. Defaults to a comprehensive set.',\n        default: ['place_id', 'name', 'formatted_address', 'types', 'url', 'website', 'international_phone_number', 'formatted_phone_number', 'geometry', 'opening_hours', 'utc_offset_minutes', 'photos', 'rating', 'user_ratings_total', 'reviews', 'price_level', 'business_status']\n      },\n      language: {\n        type: 'string',\n        description: 'The language code for the results.',\n        enum: ['ar', 'be', 'bg', 'bn', 'ca', 'cs', 'da', 'de', 'el', 'en', 'en-Au', 'en-GB', 'es', 'eu', 'fa', 'fi', 'fil', 'fr', 'gl', 'gu', 'hi', 'hr', 'hu', 'id', 'it', 'iw', 'ja', 'kk', 'kn', 'ko', 'ky', 'lt', 'lv', 'mk', 'ml', 'mr', 'my', 'nl', 'no', 'pa', 'pl', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl', 'sq', 'sr', 'sv', 'ta', 'te', 'th', 'tl', 'tr', 'uk', 'uz', 'vi', 'zh-CN', 'zh-TW']\n      },\n      region: {\n        type: 'string',\n        description: 'The region code for biasing results.'\n      }\n    },\n    required: ['place_id']\n  },\n  handler: async (args: any) => {\n    try {\n      const client = getPlacesClient();\n      \n      const result = await client.getPlaceDetails({\n        place_id: args.place_id,\n        fields: args.fields || ['place_id', 'name', 'formatted_address', 'types', 'url', 'website', 'international_phone_number', 'formatted_phone_number', 'geometry', 'opening_hours', 'utc_offset_minutes', 'photos', 'rating', 'user_ratings_total', 'reviews', 'price_level', 'business_status'],\n        language: args.language,\n        region: args.region\n      });\n      \n      return {\n        content: [{\n          type: 'text',\n          text: JSON.stringify(result, null, 2)\n        }]\n      };\n    } catch (error: any) {\n      console.error('Error in get_place_details tool:', error);\n      return {\n        content: [{\n          type: 'text',\n          text: JSON.stringify({ \n            status: 'error', \n            message: error.message \n          }, null, 2)\n        }]\n      };\n    }\n  }\n};\n\nexport const getPlacePhotoUrlTool = {\n  name: 'get_place_photo_url',\n  description: 'Constructs and returns a direct URL to a place photo using its photo reference.',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      photo_reference: {\n        type: 'string',\n        description: 'The reference string for the photo, obtained from get_place_details.'\n      },\n      max_width: {\n        type: 'integer',\n        description: 'Maximum desired width of the photo in pixels.'\n      },\n      max_height: {\n        type: 'integer',\n        description: 'Maximum desired height of the photo in pixels.'\n      }\n    },\n    required: ['photo_reference']\n  },\n  handler: async (args: any) => {\n    try {\n      const client = getPlacesClient();\n      \n      const url = client.getPlacePhotoUrl({\n        photo_reference: args.photo_reference,\n        max_width: args.max_width,\n        max_height: args.max_height\n      });\n      \n      return {\n        content: [{\n          type: 'text',\n          text: JSON.stringify({ url }, null, 2)\n        }]\n      };\n    } catch (error: any) {\n      console.error('Error in get_place_photo_url tool:', error);\n      return {\n        content: [{\n          type: 'text',\n          text: JSON.stringify({ \n            status: 'error', \n            message: error.message \n          }, null, 2)\n        }]\n      };\n    }\n  }\n};", "import { Env } from '../index.js';\nimport { getToolRegistry, ToolRegistry } from '../protocol.js';\nimport { \n  findPlaceTool,\n  getPlaceDetailsTool,\n  getPlacePhotoUrlTool,\n  setEnvironment\n} from './google-places-tools.js';\n\nexport function initializeTools(env: Env): ToolRegistry {\n  // Set environment for tools\n  setEnvironment(env);\n  \n  const registry = getToolRegistry();\n  \n  // Clear existing tools\n  registry.tools = [];\n  registry.handlers.clear();\n  \n  // Add all tools\n  const tools = [\n    findPlaceTool,\n    getPlaceDetailsTool,\n    getPlacePhotoUrlTool\n  ];\n  \n  tools.forEach(tool => {\n    registry.tools.push({\n      name: tool.name,\n      description: tool.description,\n      inputSchema: tool.inputSchema\n    });\n    \n    registry.handlers.set(tool.name, async (params) => {\n      return await tool.handler(params);\n    });\n  });\n  \n  return registry;\n}", "import { Env } from './index.js';\n\nexport function getOAuthMetadata(baseUrl: string) {\n  return {\n    issuer: baseUrl,\n    authorization_endpoint: `${baseUrl}/authorize`,\n    token_endpoint: `${baseUrl}/token`,\n    response_types_supported: ['code'],\n    grant_types_supported: ['authorization_code'],\n    code_challenge_methods_supported: ['S256', 'plain'],\n    token_endpoint_auth_methods_supported: ['client_secret_post', 'client_secret_basic'],\n  };\n}\n\nexport async function handleAuthorize(request: Request, env: Env): Promise<Response> {\n  const url = new URL(request.url);\n  const clientId = url.searchParams.get('client_id');\n  const redirectUri = url.searchParams.get('redirect_uri');\n  const responseType = url.searchParams.get('response_type');\n  const state = url.searchParams.get('state');\n  const codeChallenge = url.searchParams.get('code_challenge');\n  const codeChallengeMethod = url.searchParams.get('code_challenge_method');\n  \n  // Basic validation\n  if (!clientId || !redirectUri || responseType !== 'code') {\n    return new Response('Bad Request', { status: 400 });\n  }\n  \n  // Verify client_id\n  if (env.OAUTH_CLIENT_ID && clientId !== env.OAUTH_CLIENT_ID) {\n    return new Response('Invalid client_id', { status: 401 });\n  }\n  \n  // Verify redirect_uri\n  if (env.ALLOWED_REDIRECT_URIS) {\n    const allowedUris = env.ALLOWED_REDIRECT_URIS.split(',');\n    const isAllowed = allowedUris.some(pattern => {\n      const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n      return regex.test(redirectUri);\n    });\n    \n    if (!isAllowed) {\n      return new Response('Invalid redirect_uri', { status: 401 });\n    }\n  }\n  \n  // Generate authorization code\n  const code = crypto.randomUUID();\n  \n  // Store code details in KV (expires in 10 minutes)\n  const codeData = {\n    clientId,\n    redirectUri,\n    codeChallenge,\n    codeChallengeMethod,\n    expiresAt: Date.now() + 600000 // 10 minutes\n  };\n  \n  await env.CACHE.put(`auth_code:${code}`, JSON.stringify(codeData), {\n    expirationTtl: 600\n  });\n  \n  // Redirect back to client\n  const redirectUrl = new URL(redirectUri);\n  redirectUrl.searchParams.set('code', code);\n  if (state) {\n    redirectUrl.searchParams.set('state', state);\n  }\n  \n  return Response.redirect(redirectUrl.toString(), 302);\n}\n\nexport async function handleToken(request: Request, env: Env): Promise<Response> {\n  const formData = await request.formData();\n  const grantType = formData.get('grant_type');\n  const code = formData.get('code');\n  const clientId = formData.get('client_id');\n  const clientSecret = formData.get('client_secret');\n  const redirectUri = formData.get('redirect_uri');\n  const codeVerifier = formData.get('code_verifier');\n  \n  if (grantType !== 'authorization_code' || !code || !clientId) {\n    return new Response(JSON.stringify({\n      error: 'invalid_request'\n    }), { \n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  \n  // Verify client credentials\n  if (env.OAUTH_CLIENT_ID && clientId !== env.OAUTH_CLIENT_ID) {\n    return new Response(JSON.stringify({\n      error: 'invalid_client'\n    }), { \n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  \n  if (env.OAUTH_CLIENT_SECRET && clientSecret !== env.OAUTH_CLIENT_SECRET) {\n    return new Response(JSON.stringify({\n      error: 'invalid_client'\n    }), { \n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  \n  // Retrieve and validate code\n  const codeDataStr = await env.CACHE.get(`auth_code:${code}`);\n  if (!codeDataStr) {\n    return new Response(JSON.stringify({\n      error: 'invalid_grant'\n    }), { \n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  \n  const codeData = JSON.parse(codeDataStr);\n  \n  // Validate stored data\n  if (codeData.clientId !== clientId || codeData.redirectUri !== redirectUri) {\n    return new Response(JSON.stringify({\n      error: 'invalid_grant'\n    }), { \n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  \n  // Verify PKCE if used\n  if (codeData.codeChallenge) {\n    if (!codeVerifier) {\n      return new Response(JSON.stringify({\n        error: 'invalid_request',\n        error_description: 'code_verifier required'\n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Verify code challenge\n    let expectedChallenge = codeVerifier;\n    if (codeData.codeChallengeMethod === 'S256') {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(codeVerifier);\n      const hash = await crypto.subtle.digest('SHA-256', data);\n      const base64 = btoa(String.fromCharCode(...new Uint8Array(hash)))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=/g, '');\n      expectedChallenge = base64;\n    }\n    \n    if (expectedChallenge !== codeData.codeChallenge) {\n      return new Response(JSON.stringify({\n        error: 'invalid_grant',\n        error_description: 'Code verifier mismatch'\n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n  \n  // Generate access token\n  const accessToken = crypto.randomUUID();\n  \n  // Store token in KV (expires in 1 hour)\n  await env.CACHE.put(`access_token:${accessToken}`, JSON.stringify({\n    clientId,\n    issuedAt: Date.now(),\n    expiresAt: Date.now() + 3600000 // 1 hour\n  }), {\n    expirationTtl: 3600\n  });\n  \n  // Delete used authorization code\n  await env.CACHE.delete(`auth_code:${code}`);\n  \n  return new Response(JSON.stringify({\n    access_token: accessToken,\n    token_type: 'Bearer',\n    expires_in: 3600\n  }), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n}", "import { handleAuth } from './auth.js';\nimport { handleMcpRequest, handleSseRequest } from './protocol.js';\nimport { initializeTools } from './tools/index.js';\nimport { getOAuthMetadata, handleAuthorize, handleToken } from './oauth.js';\n\nexport interface Env {\n  MCP_AUTH_KEY: string;\n  GOOGLE_PLACES_API_KEY: string;\n  CACHE: KVNamespace;\n  OAUTH_CLIENT_ID?: string;\n  OAUTH_CLIENT_SECRET?: string;\n  ALLOWED_REDIRECT_URIS?: string;\n}\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { status: 204, headers: corsHeaders });\n    }\n\n    try {\n      const url = new URL(request.url);\n      \n      // OAuth endpoints - public access\n      if (url.pathname === '/.well-known/oauth-metadata' || \n          url.pathname === '/.well-known/openid-configuration' ||\n          url.pathname === '/sse/.well-known/oauth-metadata' ||\n          url.pathname === '/sse/.well-known/openid-configuration') {\n        const baseUrl = url.origin;\n        const metadata = getOAuthMetadata(baseUrl);\n        return new Response(JSON.stringify(metadata), {\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      } else if (url.pathname === '/authorize' || url.pathname === '/sse/authorize') {\n        return handleAuthorize(request, env);\n      } else if (url.pathname === '/token' || url.pathname === '/sse/token') {\n        return handleToken(request, env);\n      }\n      \n      // For MCP endpoints, authenticate first\n      const { authorized, userId } = await handleAuth(request, env);\n      \n      if (!authorized) {\n        return new Response('Unauthorized', { status: 401, headers: corsHeaders });\n      }\n      \n      // Initialize tools with environment\n      initializeTools(env);\n      \n      // Handle Server-Sent Events (SSE) endpoints\n      if (url.pathname === '/sse' || url.pathname === '/sse/') {\n        return handleSseRequest(request, env, ctx);\n      }\n      \n      // Handle JSON-RPC requests\n      if (url.pathname === '/' && request.method === 'POST') {\n        return handleMcpRequest(request, env, ctx);\n      }\n      \n      // For unmatched paths, return 404\n      return new Response('Not Found', { status: 404, headers: corsHeaders });\n      \n    } catch (error) {\n      console.error('Worker error:', error);\n      \n      const errorResponse = {\n        jsonrpc: '2.0',\n        error: {\n          code: -32603,\n          message: error instanceof Error ? error.message : 'Internal Server Error',\n        },\n        id: null\n      };\n      \n      return new Response(JSON.stringify(errorResponse), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n  },\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/.wrangler/tmp/bundle-lS6mpk/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/.wrangler/tmp/bundle-lS6mpk/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-mcp/.wrangler/tmp/bundle-lS6mpk/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
