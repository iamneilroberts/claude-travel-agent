{
  "version": 3,
  "sources": ["../bundle-UTMJWA/checked-fetch.js", "../bundle-UTMJWA/strip-cf-connecting-ip-header.js", "../../../src/auth.ts", "../../../node_modules/uuid/dist/esm-browser/rng.js", "../../../node_modules/uuid/dist/esm-browser/stringify.js", "../../../node_modules/uuid/dist/esm-browser/native.js", "../../../node_modules/uuid/dist/esm-browser/v4.js", "../../../src/protocol.ts", "../../../src/googlePlacesFetchClient.ts", "../../../src/tools/index.ts", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-UTMJWA/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-UTMJWA/middleware-loader.entry.ts"],
  "sourceRoot": "/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/.wrangler/tmp/dev-eezqBg",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "import { Env } from './index';\n\nexport async function handleAuth(request: Request, env: Env): Promise<Response | null> {\n  const authHeader = request.headers.get('Authorization');\n  \n  // Skip auth for OPTIONS requests\n  if (request.method === 'OPTIONS') {\n    return null;\n  }\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return new Response('Unauthorized', { \n      status: 401,\n      headers: {\n        'WWW-Authenticate': 'Bearer',\n      }\n    });\n  }\n  \n  const token = authHeader.substring(7);\n  \n  if (token !== env.MCP_AUTH_KEY) {\n    return new Response('Invalid token', { status: 403 });\n  }\n  \n  return null; // Auth successful\n}", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "import { v4 as uuidv4 } from 'uuid';\n\nexport interface JsonRpcRequest {\n  jsonrpc: '2.0';\n  method: string;\n  params?: any;\n  id: string | number;\n}\n\nexport interface JsonRpcResponse {\n  jsonrpc: '2.0';\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n  id: string | number | null;\n}\n\nexport interface Tool {\n  name: string;\n  description: string;\n  inputSchema: any;\n}\n\nexport interface ToolHandler {\n  (params: any): Promise<any>;\n}\n\nexport interface ToolRegistry {\n  tools: Tool[];\n  handlers: Map<string, ToolHandler>;\n}\n\nexport async function handleMcpRequest(\n  request: Request,\n  tools: ToolRegistry,\n  corsHeaders: Record<string, string>\n): Promise<Response> {\n  try {\n    const json = await request.json() as JsonRpcRequest;\n    const response = await processJsonRpcRequest(json, tools);\n    \n    return new Response(JSON.stringify(response), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    console.error('Parse error in handleMcpRequest:', error);\n    return new Response(JSON.stringify({\n      jsonrpc: '2.0',\n      error: {\n        code: -32700,\n        message: 'Parse error'\n      },\n      id: null\n    }), {\n      status: 400,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\nexport async function handleSseRequest(\n  request: Request,\n  tools: ToolRegistry,\n  corsHeaders: Record<string, string>\n): Promise<Response> {\n  // Implementation for Server-Sent Events (SSE) for Claude Desktop\n  const encoder = new TextEncoder();\n  \n  const readable = new ReadableStream({\n    async start(controller) {\n      // Send initial connection event\n      controller.enqueue(encoder.encode(`data: ${JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'connected',\n        params: { sessionId: uuidv4() }\n      })}\\n\\n`));\n      \n      // Handle incoming messages\n      try {\n        const reader = request.body?.getReader();\n        if (!reader) return;\n        \n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          \n          const text = new TextDecoder().decode(value);\n          const lines = text.split('\\n');\n          \n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              const data = line.slice(6);\n              try {\n                const json = JSON.parse(data) as JsonRpcRequest;\n                const response = await processJsonRpcRequest(json, tools);\n                controller.enqueue(encoder.encode(`data: ${JSON.stringify(response)}\\n\\n`));\n              } catch (e) {\n                console.error('Error processing SSE message:', e);\n                // Send error back to client\n                controller.enqueue(encoder.encode(`data: ${JSON.stringify({\n                  jsonrpc: '2.0',\n                  error: {\n                    code: -32603,\n                    message: 'Internal error',\n                    data: e instanceof Error ? e.message : 'Unknown error'\n                  },\n                  id: null\n                })}\\n\\n`));\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('SSE error:', error);\n      } finally {\n        controller.close();\n      }\n    }\n  });\n  \n  return new Response(readable, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      ...corsHeaders\n    }\n  });\n}\n\nasync function processJsonRpcRequest(\n  request: JsonRpcRequest,\n  tools: ToolRegistry\n): Promise<JsonRpcResponse> {\n  switch (request.method) {\n    case 'initialize':\n      return {\n        jsonrpc: '2.0',\n        result: {\n          protocolVersion: '2024-11-05',\n          capabilities: {\n            tools: {},\n            prompts: {}\n          },\n          serverInfo: {\n            name: 'Google Places API MCP Server',\n            version: '1.0.0'\n          }\n        },\n        id: request.id\n      };\n      \n    case 'tools/list':\n      return {\n        jsonrpc: '2.0',\n        result: { tools: tools.tools },\n        id: request.id\n      };\n      \n    case 'tools/call':\n      try {\n        const { name, arguments: args } = request.params;\n        const handler = tools.handlers.get(name);\n        \n        if (!handler) {\n          return {\n            jsonrpc: '2.0',\n            error: {\n              code: -32601,\n              message: `Tool not found: ${name}`\n            },\n            id: request.id\n          };\n        }\n        \n        const result = await handler(args);\n        return {\n          jsonrpc: '2.0',\n          result: {\n            content: [\n              { type: 'text', text: JSON.stringify(result) }\n            ]\n          },\n          id: request.id\n        };\n      } catch (error) {\n        console.error(`Error executing tool:`, error);\n        return {\n          jsonrpc: '2.0',\n          error: {\n            code: -32603,\n            message: 'Internal error',\n            data: error instanceof Error ? error.message : 'Unknown error'\n          },\n          id: request.id\n        };\n      }\n      \n    default:\n      return {\n        jsonrpc: '2.0',\n        error: {\n          code: -32601,\n          message: `Method not found: ${request.method}`\n        },\n        id: request.id\n      };\n  }\n}", "export class GooglePlacesFetchClient {\n  private apiKey: string;\n  \n  constructor(apiKey: string) {\n    if (!apiKey) {\n      console.error(\"FATAL ERROR: Google Maps API Key is not defined\");\n      throw new Error(\"GooglePlacesFetchClient: Google Maps API Key is not configured\");\n    }\n    this.apiKey = apiKey;\n  }\n  \n  // Field mapping between legacy field names (used by Claude) and Places API v1 field paths\n  private FIELD_MAPPING: Record<string, string> = {\n    'place_id': 'id',\n    'name': 'displayName',\n    'formatted_address': 'formattedAddress',\n    'types': 'types',\n    'geometry': 'location',\n    'photos': 'photos',\n    'rating': 'rating',\n    'user_ratings_total': 'userRatingCount',\n    'editorial_summary': 'editorialSummary',\n    'formatted_phone_number': 'internationalPhoneNumber',\n    'website': 'websiteUri',\n    'url': 'googleMapsUri',\n    'opening_hours': 'regularOpeningHours',\n    'price_level': 'priceLevel',\n    'business_status': 'businessStatus'\n  };\n  \n  // Map Claude-style field names to Google Places API v1 field paths\n  private mapFieldNames(fields?: string[]): string {\n    if (!fields || fields.length === 0) {\n      // Default fields - these are validated field names\n      return 'name,formattedAddress,types,location,id';\n    }\n    \n    // Map common field names directly to Google Places API v1 field names\n    // Rather than adding a 'places.' prefix, we just use the raw field names\n    // which seems to be what the Places API v1 expects in the field mask\n    const mappedFields = fields.map(field => {\n      // Map the field name to the Google Places API v1 field name\n      switch (field) {\n        case 'place_id': return 'id';\n        case 'name': return 'displayName.text';\n        case 'formatted_address': return 'formattedAddress';\n        case 'types': return 'types';\n        case 'geometry': return 'location';\n        case 'photos': return 'photos';\n        case 'rating': return 'rating';\n        case 'user_ratings_total': return 'userRatingCount';\n        case 'editorial_summary': return 'editorialSummary.text';\n        case 'formatted_phone_number': return 'internationalPhoneNumber';\n        case 'website': return 'websiteUri';\n        case 'url': return 'googleMapsUri';\n        case 'opening_hours': return 'regularOpeningHours';\n        case 'price_level': return 'priceLevel';\n        case 'business_status': return 'businessStatus';\n        default: \n          // For fields that don't have a mapping, strip any 'places.' prefix\n          // and use the field name as-is\n          return field.startsWith('places.') ? field.substring(7) : field;\n      }\n    });\n    \n    return mappedFields.join(',');\n  }\n  \n  // Method to find places\n  async findPlace(params: {\n    query: string;\n    language?: string;\n    region?: string;\n    fields?: string[];\n    max_results?: number;\n  }): Promise<any> {\n    console.error(`GooglePlacesFetchClient.findPlace called with query: ${params.query}`);\n    try {\n      // Format field mask for Places API v1\n      // Add \"places.\" prefix to each field for field mask header\n      let fieldMask = 'places.displayName,places.formattedAddress,places.id';\n      if (params.fields && params.fields.length > 0) {\n        fieldMask = params.fields.map(field => {\n          // For standard fields, use proper Places API v1 format\n          switch (field) {\n            case 'place_id': return 'places.id';\n            case 'name': return 'places.displayName';\n            case 'formatted_address': return 'places.formattedAddress';\n            case 'types': return 'places.types';\n            case 'geometry': return 'places.location';\n            case 'photos': return 'places.photos';\n            default: return `places.${field}`;\n          }\n        }).join(',');\n      }\n      \n      console.error(`Using field mask: ${fieldMask}`);\n      \n      const searchUrl = new URL('https://places.googleapis.com/v1/places:searchText');\n      \n      const requestBody = {\n        textQuery: params.query,\n        ...(params.language && { languageCode: params.language }),\n        ...(params.region && { regionCode: params.region })\n      };\n      \n      console.error(`Request body: ${JSON.stringify(requestBody)}`);\n      console.error(`Fetching from URL: ${searchUrl.toString()}`);\n      \n      const finalUrl = `${searchUrl.toString()}?key=${this.apiKey}`;\n      console.error('Final search URL (with key redacted):', finalUrl.replace(this.apiKey, 'REDACTED'));\n      \n      const response = await fetch(finalUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Goog-FieldMask': fieldMask\n        },\n        body: JSON.stringify(requestBody)\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API Error: ${errorText}`);\n        throw new Error(`Google Places API error: ${response.status} - ${errorText}`);\n      }\n      \n      const data = await response.json();\n      console.error(`Received places data: ${JSON.stringify(data).substring(0, 200)}...`);\n      \n      // Handle results and apply max_results limit if needed\n      const places = data.places || [];\n      const limitedPlaces = params.max_results && params.max_results > 0 \n        ? places.slice(0, params.max_results) \n        : places;\n      \n      return {\n        status: \"success\",\n        candidates: limitedPlaces.map((place: any) => ({\n          place_id: place.id,\n          name: place.displayName?.text,\n          formatted_address: place.formattedAddress,\n          types: place.types,\n          geometry: {\n            location: {\n              lat: place.location?.latitude,\n              lng: place.location?.longitude\n            }\n          }\n        }))\n      };\n    } catch (e: any) {\n      console.error(`GooglePlacesFetchClient.findPlace exception: ${e.message}`, e);\n      return { status: \"error\", message: e.message };\n    }\n  }\n  \n  // Method to get place details\n  async getPlaceDetails(params: {\n    place_id: string;\n    language?: string;\n    region?: string;\n    fields?: string[];\n  }): Promise<any> {\n    console.error(`GooglePlacesFetchClient.getPlaceDetails called for place_id: ${params.place_id}`);\n    try {\n      // Format field mask for Places API v1\n      // Add \"places.\" prefix to each field for field mask header\n      let fieldMask = 'places.displayName,places.formattedAddress,places.id,places.photos';\n      if (params.fields && params.fields.length > 0) {\n        fieldMask = params.fields.map(field => {\n          // For standard fields, use proper Places API v1 format\n          switch (field) {\n            case 'place_id': return 'places.id';\n            case 'name': return 'places.displayName';\n            case 'formatted_address': return 'places.formattedAddress';\n            case 'types': return 'places.types';\n            case 'geometry': return 'places.location';\n            case 'photos': return 'places.photos';\n            case 'rating': return 'places.rating';\n            case 'user_ratings_total': return 'places.userRatingCount';\n            case 'editorial_summary': return 'places.editorialSummary.text';\n            case 'formatted_phone_number': return 'places.internationalPhoneNumber';\n            case 'website': return 'places.websiteUri';\n            case 'url': return 'places.googleMapsUri';\n            case 'opening_hours': return 'places.regularOpeningHours';\n            case 'price_level': return 'places.priceLevel';\n            case 'business_status': return 'places.businessStatus';\n            default: return `places.${field}`;\n          }\n        }).join(',');\n      }\n      \n      console.error(`Using field mask: ${fieldMask}`);\n      \n      // For Places API v1, use the correct URL format\n      const detailsUrl = new URL(`https://places.googleapis.com/v1/places/${params.place_id}`);\n      const urlParams = new URLSearchParams();\n      urlParams.append('key', this.apiKey);\n      \n      if (params.language) {\n        urlParams.append('languageCode', params.language);\n      }\n      \n      if (params.region) {\n        urlParams.append('regionCode', params.region);\n      }\n            \n      const finalUrl = `${detailsUrl.toString()}?${urlParams.toString()}`;\n      console.error('Final URL (with key redacted):', finalUrl.replace(this.apiKey, 'REDACTED'));\n      \n      const response = await fetch(finalUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Goog-FieldMask': fieldMask\n        }\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API Error: ${errorText}`);\n        throw new Error(`Google Places API error: ${response.status} - ${errorText}`);\n      }\n      \n      const place = await response.json();\n      console.error(`Received place data: ${JSON.stringify(place).substring(0, 200)}...`);\n      \n      // Transform response to match the format expected by Claude\n      return {\n        status: \"success\",\n        result: {\n          place_id: place.id,\n          name: place.displayName?.text,\n          formatted_address: place.formattedAddress,\n          types: place.types,\n          rating: place.rating,\n          user_ratings_total: place.userRatingCount,\n          editorial_summary: place.editorialSummary?.text,\n          formatted_phone_number: place.internationalPhoneNumber,\n          website: place.websiteUri,\n          url: place.googleMapsUri,\n          business_status: place.businessStatus,\n          // Handle opening hours\n          opening_hours: place.regularOpeningHours ? {\n            open_now: place.regularOpeningHours.openNow,\n            weekday_text: place.regularOpeningHours.weekdayDescriptions\n          } : undefined,\n          // Handle photos\n          photos: place.photos?.map((photo: any) => ({\n            photo_reference: photo.name, // The photo name is used as the reference in Places API v1\n            height: photo.heightPx,\n            width: photo.widthPx\n          }))\n        }\n      };\n    } catch (e: any) {\n      console.error(`GooglePlacesFetchClient.getPlaceDetails exception: ${e.message}`, e);\n      return { status: \"error\", message: e.message };\n    }\n  }\n  \n  // Method to get place photo URL\n  getPlacePhotoUrl(params: {\n    photo_reference: string;\n    max_width?: number;\n    max_height?: number;\n  }): any {\n    console.error(`GooglePlacesFetchClient.getPlacePhotoUrl called for photo_reference: ${params.photo_reference}`);\n    \n    try {\n      // For Places API v1, the photo_reference should be a resource path like 'places/ChIJN1t_tDeuEmsRUsoyG83frY4/photos/AWU5eFgsnF8iNkzV68qLPR8iZoA6OMEhH_ggxg2nG_u1TlQbUL4TLpF2boNct9VzPRIRRvJhqgcMnRF60NpWkxWzL_WB22IskQBrRXR9UTwHGcXTcB7lx6NCRk-1eTJhf1dKMGM7aRV3-PnMlGUW8QLvrLLl5p4QJ77xJA'\n      let photoRef = params.photo_reference;\n      \n      // If it looks like a simple ID or path component, construct a full path\n      if (!photoRef.includes('places/') && !photoRef.includes('photos/')) {\n        photoRef = `photos/${photoRef}`;\n      }\n      \n      // The URL format for Places API v1\n      let photoUrl = `https://places.googleapis.com/v1/${photoRef}/media`;\n      \n      // Add URL parameters\n      const urlParams = new URLSearchParams();\n      urlParams.append('key', this.apiKey);\n      \n      if (params.max_width) {\n        urlParams.append('maxWidthPx', params.max_width.toString());\n      }\n      \n      if (params.max_height) {\n        urlParams.append('maxHeightPx', params.max_height.toString());\n      }\n      \n      // If neither max_width nor max_height is provided, add a default width\n      if (!params.max_width && !params.max_height) {\n        urlParams.append('maxWidthPx', '800');\n      }\n      \n      const finalUrl = `${photoUrl}?${urlParams.toString()}`;\n      console.error('Final photo URL (with key redacted):', finalUrl.replace(this.apiKey, 'REDACTED'));\n      \n      return {\n        status: \"success\",\n        url: finalUrl\n      };\n    } catch (e: any) {\n      console.error(`GooglePlacesFetchClient.getPlacePhotoUrl exception: ${e.message}`, e);\n      return { status: \"error\", message: e.message };\n    }\n  }\n}", "import { Env } from '../index';\nimport { ToolRegistry } from '../protocol';\nimport { GooglePlacesFetchClient } from '../googlePlacesFetchClient';\n\nexport function initializeTools(env: Env): ToolRegistry {\n  const registry: ToolRegistry = {\n    tools: [],\n    handlers: new Map()\n  };\n  \n  // Create Google Places Client using Fetch API\n  const placesClient = new GooglePlacesFetchClient(env.GOOGLE_MAPS_API_KEY);\n  \n  // Find Place Tool\n  registry.tools.push({\n    name: 'find_place',\n    description: 'Searches for places based on a text query. Returns a list of candidates.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        query: {\n          type: 'string',\n          description: 'The text string to search for (e.g., \"restaurants in Paris\", \"Eiffel Tower\").'\n        },\n        language: {\n          type: 'string',\n          description: 'The language code (e.g., \"en\", \"fr\") to return results in.',\n          enum: [\"ar\", \"be\", \"bg\", \"bn\", \"ca\", \"cs\", \"da\", \"de\", \"el\", \"en\", \"en-Au\", \"en-GB\", \"es\", \"eu\", \"fa\", \"fi\", \"fil\", \"fr\", \"gl\", \"gu\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"iw\", \"ja\", \"kk\", \"kn\", \"ko\", \"ky\", \"lt\", \"lv\", \"mk\", \"ml\", \"mr\", \"my\", \"nl\", \"no\", \"pa\", \"pl\", \"pt\", \"pt-BR\", \"pt-PT\", \"ro\", \"ru\", \"sk\", \"sl\", \"sq\", \"sr\", \"sv\", \"ta\", \"te\", \"th\", \"tl\", \"tr\", \"uk\", \"uz\", \"vi\", \"zh-CN\", \"zh-TW\"]\n        },\n        region: {\n          type: 'string',\n          description: 'The region code (e.g., \"us\", \"fr\") to bias results towards.'\n        },\n        fields: {\n          type: 'array',\n          items: {\n            type: 'string'\n          },\n          description: 'Fields to include in the response.'\n        },\n        max_results: {\n          type: 'integer',\n          description: 'Maximum number of place candidates to return (default 5, max 10).',\n          default: 5,\n          maximum: 10,\n          minimum: 1\n        }\n      },\n      required: ['query']\n    }\n  });\n  \n  registry.handlers.set('find_place', async (args) => {\n    try {\n      const result = await placesClient.findPlace({\n        query: args.query,\n        language: args.language,\n        region: args.region,\n        fields: args.fields,\n        max_results: args.max_results || 5,\n      });\n      return result;\n    } catch (error) {\n      console.error(`Error in 'find_place' tool:`, error);\n      return { status: \"error\", message: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  });\n  \n  // Get Place Details Tool\n  registry.tools.push({\n    name: 'get_place_details',\n    description: 'Retrieves detailed information about a specific place using its Place ID.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        place_id: {\n          type: 'string',\n          description: 'The Place ID of the place.'\n        },\n        language: {\n          type: 'string',\n          description: 'The language code for the results.',\n          enum: [\"ar\", \"be\", \"bg\", \"bn\", \"ca\", \"cs\", \"da\", \"de\", \"el\", \"en\", \"en-Au\", \"en-GB\", \"es\", \"eu\", \"fa\", \"fi\", \"fil\", \"fr\", \"gl\", \"gu\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"iw\", \"ja\", \"kk\", \"kn\", \"ko\", \"ky\", \"lt\", \"lv\", \"mk\", \"ml\", \"mr\", \"my\", \"nl\", \"no\", \"pa\", \"pl\", \"pt\", \"pt-BR\", \"pt-PT\", \"ro\", \"ru\", \"sk\", \"sl\", \"sq\", \"sr\", \"sv\", \"ta\", \"te\", \"th\", \"tl\", \"tr\", \"uk\", \"uz\", \"vi\", \"zh-CN\", \"zh-TW\"]\n        },\n        region: {\n          type: 'string',\n          description: 'The region code for biasing results.'\n        },\n        fields: {\n          type: 'array',\n          items: {\n            type: 'string'\n          },\n          description: 'Specific fields to request.'\n        }\n      },\n      required: ['place_id']\n    }\n  });\n  \n  registry.handlers.set('get_place_details', async (args) => {\n    try {\n      const result = await placesClient.getPlaceDetails({\n        place_id: args.place_id,\n        language: args.language,\n        region: args.region,\n        fields: args.fields,\n      });\n      return result;\n    } catch (error) {\n      console.error(`Error in 'get_place_details' tool:`, error);\n      return { status: \"error\", message: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  });\n  \n  // Get Place Photo URL Tool\n  registry.tools.push({\n    name: 'get_place_photo_url',\n    description: 'Constructs and returns a direct URL to a place photo using its photo reference.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        photo_reference: {\n          type: 'string',\n          description: 'The reference string for the photo, obtained from get_place_details.'\n        },\n        max_width: {\n          type: 'integer',\n          description: 'Maximum desired width of the photo in pixels.'\n        },\n        max_height: {\n          type: 'integer',\n          description: 'Maximum desired height of the photo in pixels.'\n        }\n      },\n      required: ['photo_reference']\n    }\n  });\n  \n  registry.handlers.set('get_place_photo_url', (args) => {\n    try {\n      const result = placesClient.getPlacePhotoUrl({\n        photo_reference: args.photo_reference,\n        max_width: args.max_width,\n        max_height: args.max_height\n      });\n      return result;\n    } catch (error) {\n      console.error(`Error in 'get_place_photo_url' tool:`, error);\n      return { status: \"error\", message: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  });\n  \n  return registry;\n}", "import { handleAuth } from './auth';\nimport { handleMcpRequest, handleSseRequest } from './protocol';\nimport { initializeTools } from './tools';\n\nexport interface Env {\n  MCP_AUTH_KEY: string;\n  GOOGLE_MAPS_API_KEY: string;\n  MCP_CACHE?: KVNamespace | null;\n}\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { status: 204, headers: corsHeaders });\n    }\n\n    try {\n      // Check authentication\n      const authResponse = await handleAuth(request, env);\n      if (authResponse) return authResponse;\n\n      // Initialize tools\n      const tools = initializeTools(env);\n\n      // Handle different endpoints\n      const url = new URL(request.url);\n      \n      if (url.pathname === '/rpc') {\n        // Standard JSON-RPC endpoint\n        return handleMcpRequest(request, tools, corsHeaders);\n      } else if (url.pathname === '/sse') {\n        // Server-Sent Events endpoint for Claude Desktop\n        return handleSseRequest(request, tools, corsHeaders);\n      } else if (url.pathname === '/') {\n        // Default endpoint - redirect to RPC\n        return handleMcpRequest(request, tools, corsHeaders);\n      } else {\n        return new Response('Not Found', { \n          status: 404,\n          headers: corsHeaders \n        });\n      }\n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response(JSON.stringify({\n        jsonrpc: '2.0',\n        error: {\n          code: -32603,\n          message: 'Internal error',\n          data: error instanceof Error ? error.message : 'Unknown error'\n        },\n        id: null\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n  },\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/.wrangler/tmp/bundle-UTMJWA/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/.wrangler/tmp/bundle-UTMJWA/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/neil/dev/claude-travel-chat/remote_mcp_servers/google-places-api-mcp/.wrangler/tmp/bundle-UTMJWA/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
